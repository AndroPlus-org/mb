#!/bin/sh

echo "Access-Control-Allow-Origin: *"
echo "Content-type: application/json"
echo ""

source ./cgi_lib
cgi_init

echo "cmd: $cgi_cmd" >&2

if [ "$cgi_cmd" == "get_info" ]; then
    echo '{"info": "mb: 000000000000000000000000, st: 0, i: 0, p: -1, bat: 80, dc: 0, iqc: 40, v: 4.0"}'
    
elif [ "$cgi_cmd" == "rm_upload" ]; then
    rm -rf ../upload/*
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "sync" ]; then
    sync
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "simulate" ]; then
    #echo "$cgi_key" > /sys/mb/ctrl
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "get_conf" ]; then
    echo "{\"conf\": \"$(cat ../../mb_conf/mb.conf)\"}"
    
elif [ "$cgi_cmd" == "set_conf" ]; then
    echo "$cgi_conf" > ../../mb_conf/mb.conf
    #echo 0 > /sys/mb/ctrl
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "get_app_conf" ]; then
    echo "{\"app_conf\": \"$(cat ../../mb_conf/mb_app.conf)\"}"
    
elif [ "$cgi_cmd" == "set_app_conf" ]; then
    echo "$cgi_app_conf" > ../../mb_conf/mb_app.conf
    sync
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "get_wifi" ]; then
    echo "{\"wifi\": \"$(cat ../../mb_conf/wifi.conf)\"}"
    
elif [ "$cgi_cmd" == "set_wifi" ]; then
    echo "$cgi_wifi" > ../../mb_conf/wifi.conf
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "upgrade" ]; then
#    cd ../upload/
#    rm -rf mbrush-fw
#    tar xf mbrush-fw.tar || { echo '{"status": "err: tar file broken"}'; exit 1; }
    #./mbrush-fw/run.sh || { echo "{\"status\": \"err: $?\"}"; exit 1; }
    echo '{"status": "ok"}'
    
#elif [ "$cgi_cmd" == "pos_dbg" ]; then
#    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "reboot" ]; then
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "eval" ]; then
#    cd ~
    echo "eval: $cgi_val"
#    ret="$(eval "$cgi_val" 2>&1)"
    echo "ret: $?"
    echo "----------------"
    echo "$ret"

else
    echo '{"status": "err: unknown cmd"}'
fi

